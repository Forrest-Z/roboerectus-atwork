#include <actionlib/client/simple_action_client.h>
#include "dynamic_reconfigure/server.h"
#include <youbot_arm_joints_trajectory/ControllerConfig.h>
#include <youbot_arm_joints/JointAction.h>
#include <sensor_msgs/JointState.h>
#include <geometry_msgs/Twist.h>
#include <control_msgs/FollowJointTrajectoryAction.h>
#include <sensor_msgs/Joy.h>
#include <std_msgs/Bool.h>
#include <iostream>
#include <assert.h>
#include "ros/ros.h"

class YoubotArmJointsTrajectoryController{
  public:
    typedef actionlib::SimpleActionClient<control_msgs::FollowJointTrajectoryAction> ActionClient;
    typedef youbot_arm_joints_trajectory::ControllerConfig Config;

    YoubotArmJointsTrajectoryController():nh_("~"),rate_(20),first_time_(true), time_(10.0){
      client_.reset( new ActionClient("arm_1/arm_controller/follow_joint_trajectory", true) );
      if(!client_->waitForServer(ros::Duration(5.0))){
        ROS_ERROR("youbot arm_1/arm_controller/follow_joint_trajectory is not excuting");
      }
      srv_ = boost::make_shared <dynamic_reconfigure::Server<Config> > (nh_);
      dynamic_reconfigure::Server<Config>::CallbackType f =
        boost::bind (&YoubotArmJointsTrajectoryController::configCallback, this, _1, _2);
      srv_->setCallback(f);
      subscribe();
    }

    ~YoubotArmJointsTrajectoryController(){
      unsubscribe();
    }

    void spin(){
      ros::Rate r(rate_);
      while( nh_.ok() ){
        ros::spinOnce();
        r.sleep();
      }
    }

  private:
    ros::NodeHandle nh_;
    unsigned int rate_;
    boost::shared_ptr<ActionClient> client_;
    boost::shared_ptr<dynamic_reconfigure::Server<Config> > srv_;
    boost::mutex mutex_;
    std::vector<double> joints_;
    double timeout_;
    double time_;
    ros::Subscriber sub_;
    std::vector<double> joints_state_;
    bool first_time_;

    void subscribe(){
    sub_ = nh_.subscribe("/joint_states"  ,1,
      &YoubotArmJointsTrajectoryController::jointsCB,this);
    }

    void unsubscribe(){
      sub_.shutdown();
    }

    void jointsCB(const sensor_msgs::JointState::ConstPtr& msg){
      boost::mutex::scoped_lock lock(mutex_);
      joints_state_.clear();
      if(msg->position.size() != 7 && msg->name[0] == "arm_joint_1"){
        ROS_WARN("It should be 7 joints, received %lu joints!",
          msg->position.size());
        return;
      }
      for(size_t i = 0; i < msg->position.size(); ++i)
        joints_state_.push_back(msg->position[i]);
    }


    void configCallback(Config &config, uint32_t level){
      //boost::mutex::scoped_lock lock(mutex_);
      joints_.clear();
      if(config.straight){
        joints_.push_back(2.93);
        joints_.push_back(1.31);
        joints_.push_back(-2.51);
        joints_.push_back(1.73);
        joints_.push_back(2.88);
        
        config.joint0 = joints_[0];
        config.joint1 = joints_[1];
        config.joint2 = joints_[2];
        config.joint3 = joints_[3];
        config.joint4 = joints_[4];
        config.initial = false;
      }
      else if(config.initial){
        joints_.push_back(0.025);
        joints_.push_back(0.025);
        joints_.push_back(-0.025);
        joints_.push_back(0.025);
        joints_.push_back(0.115);
        
        config.joint0 = joints_[0];
        config.joint1 = joints_[1];
        config.joint2 = joints_[2];
        config.joint3 = joints_[3];
        config.joint4 = joints_[4];
        config.straight = false;
      }
      else if(!config.straight && !config.initial){
        joints_.push_back(config.joint0);
        joints_.push_back(config.joint1);
        joints_.push_back(config.joint2);
        joints_.push_back(config.joint3);
        joints_.push_back(config.joint4);
        //joints_.push_back(config.gripper_l);
        //joints_.push_back(config.gripper_r);
      }
      timeout_ = config.timeout;
      time_ = config.time;
      moveArm();
    }
    
    void moveArm(){
      //subscribe();
      usleep(1000);
      if(joints_state_.empty()){
        ROS_WARN("Cannot receive joints state ");
        return;
      }
      double time_start = 1.0;
  
      control_msgs::FollowJointTrajectoryGoal goal;
      goal.trajectory.joint_names.push_back("arm_joint_1");
      goal.trajectory.joint_names.push_back("arm_joint_2");
      goal.trajectory.joint_names.push_back("arm_joint_3");
      goal.trajectory.joint_names.push_back("arm_joint_4");
      goal.trajectory.joint_names.push_back("arm_joint_5");

      // We will have two waypoints in this goal trajectory
      // Always add the current position as first waypoint
      ROS_INFO("Current Joints: [%lf, %lf, %lf, %lf, %lf]",
      joints_state_[0], joints_state_[1], joints_state_[2], joints_state_[3], joints_state_[4]);  
      
      if(first_time_){
        first_time_ = false;
        goal.trajectory.points.resize(1);
        goal.trajectory.points[0].positions.resize(5);  
        goal.trajectory.points[0].positions[0] = joints_state_[0];  
        goal.trajectory.points[0].positions[1] = joints_state_[1];  
        goal.trajectory.points[0].positions[2] = joints_state_[2];  
        goal.trajectory.points[0].positions[3] = joints_state_[3];  
        goal.trajectory.points[0].positions[4] = joints_state_[4];  
        // Velocities  
        goal.trajectory.points[0].velocities.resize(5);
        for (unsigned int i = 0; i < 5; ++i){
          goal.trajectory.points[0].velocities[i] = 0.0;
        }

        goal.trajectory.points[0].accelerations.resize(5);
        for (size_t b = 0; b < 5; ++b){
          goal.trajectory.points[0].accelerations[b] = 0.001;
        }
        goal.trajectory.points[0].time_from_start = ros::Duration(10.0);

      }
      else{
        goal.trajectory.points.resize(2);
        int ind = 0;
         
        goal.trajectory.points[ind].positions.resize(5);  
        goal.trajectory.points[ind].positions[0] = joints_state_[0];  
        goal.trajectory.points[ind].positions[1] = joints_state_[1];  
        goal.trajectory.points[ind].positions[2] = joints_state_[2];  
        goal.trajectory.points[ind].positions[3] = joints_state_[3];  
        goal.trajectory.points[ind].positions[4] = joints_state_[4];  
        /*
        goal.trajectory.points[ind].positions.resize(5);  
        goal.trajectory.points[ind].positions[0] = joints_[0];
        goal.trajectory.points[ind].positions[1] = joints_[1];
        goal.trajectory.points[ind].positions[2] = joints_[2];
        goal.trajectory.points[ind].positions[3] = joints_[3];
        goal.trajectory.points[ind].positions[4] = joints_[4];
        */

        // Velocities  
        goal.trajectory.points[ind].velocities.resize(5);  
        for (unsigned int i = 0; i < 5; ++i){  
          goal.trajectory.points[ind].velocities[i] = 0.0;  
        }  
      
        goal.trajectory.points[ind].accelerations.resize(5);  
        for (size_t b = 0; b < 5; ++b){  
          goal.trajectory.points[ind].accelerations[b] = 0.001;  
        }
        goal.trajectory.points[ind].time_from_start = ros::Duration(1.0);
        
         
        ++ind;  
        goal.trajectory.points[ind].positions.resize(5);  
        goal.trajectory.points[ind].positions[0] = joints_[0];  
        goal.trajectory.points[ind].positions[1] = joints_[1];  
        goal.trajectory.points[ind].positions[2] = joints_[2];  
        goal.trajectory.points[ind].positions[3] = joints_[3];  
        goal.trajectory.points[ind].positions[4] = joints_[4];
    
        // Velocities  
        goal.trajectory.points[ind].velocities.resize(5);  
        for (unsigned int i = 0; i < 5; ++i){  
          goal.trajectory.points[ind].velocities[i] = 0.0;  
        }  
      
        goal.trajectory.points[ind].accelerations.resize(5);  
        for (size_t b = 0; b < 5; ++b){  
          goal.trajectory.points[ind].accelerations[b] = 0.001;  
        }  
        // To be reached 1 second after starting along the trajectory  
        goal.trajectory.points[ind].time_from_start = ros::Duration(1.0+time_);
        
        goal.trajectory.header.stamp = ros::Time::now() ;
      }
      ROS_INFO("Trajectory:"); 
      std::string str;
      for(unsigned int i = 0; i < goal.trajectory.points.size(); ++i){
        str += "[";
        for(unsigned int j = 0; j <  goal.trajectory.points[i].positions.size(); ++j){
          std::ostringstream strs;
          strs << goal.trajectory.points[i].positions[j] << ",";
          str += strs.str();
        }
        str += "]";
        std::ostringstream strs;
        strs << goal.trajectory.points[i].time_from_start;
        str += strs.str(); 
      }
      ROS_INFO("%s", str.c_str());  
      client_->sendGoal(goal);
      //unsubscribe();
    }
};

int main( int argc, char** argv ){
  ros::init( argc, argv, "youbot_arm_joints_trajectory_controller" );
  YoubotArmJointsTrajectoryController rt_;
  rt_.spin();
  return 0;
}
